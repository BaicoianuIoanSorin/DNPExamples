@page "/UsersTodos/{UserId:int}"
@using TodoWithLoginFeature.Models
@using TodoWithLoginFeature.Data
@using System.Diagnostics.Tracing

@inject IUsersData UsersData
@inject ITodosData TodosData
@inject NavigationManager NavigationManager
@if (todos == null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
    else if(!todos.Any())
    {
        <p>
            <em>This user does not have any todos yet.</em>
        </p>
    }
    else
    {
        <table class="table">
            <thead>
            <tr>
                <th>Todo ID</th>
                <th>Title</th>
                <th>Completed?</th>
                <th>Remove</th>
                <th>Edit</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in allTodos)
            {
                if (item.UserId == UserId)
                {
                    <tr>
                        <td>@item.TodoId</td>
                        <td>@item.Title</td>
                        <td>
                            <input type="checkbox" checked="@item.IsCompleted" @onchange="@((arg) => CompletedChange(arg, item))"/>
                        </td>
                        <td>
                            <button @onclick="(() => RemoveTodo(item.TodoId))">
                                <i class="oi oi-trash" style="color:red"/>
                            </button>
                        </td>
                        <td>
                            <button @onclick="@(() => Edit(item.TodoId))">
                                <i class="oi oi-pencil" style="color:#1b6ec2"/>
                            </button>
                        </td>
                    </tr>
                }
            }
            </tbody>
            <!-- To add functionality like in Todos.razor -->
        </table>
    }
@code {
    [Parameter] public int UserId { get; set; }
    private IList<Todo> allTodos;
    private IList<Todo> todos;

    protected override async Task OnInitializedAsync()
    {
        allTodos = TodosData.GetTodos();
        todos = allTodos;
    }

    private void CompletedChange(ChangeEventArgs evt, Todo todo)
    {
        todo.IsCompleted = (bool) evt.Value;
        TodosData.Update(todo);
    }

    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"Edit/{id}");
    }

    private void RemoveTodo(int todoId)
    {
        Todo toDoToRemove = allTodos.First(t => t.TodoId == todoId);
        TodosData.RemoveTodo(todoId);
        allTodos.Remove(toDoToRemove);
        todos.Remove(toDoToRemove);
    }
    
}