@page "/Todos"
@using TodoClient.Models
@using TodoClient.Data
<!--- Import statements, like normal c# --->
@using System.Collections
@using Microsoft.AspNetCore.Mvc.Filters
@inject ITodosService _todosService 
@inject NavigationManager NavigationManager;
<!---Dependency injection, like adding a new class
to other class in java--->  
<h1>Todo list</h1>

<p>
    Filter by User Id: <input type="number" @oninput="@((arg) => FilterByUserId(arg))" style="width: 50px"/>
</p>

<p>
    Filter by completed status:
    <select class="form-control selectpicker" @onchange="@((arg) => FilterByCompletedStatus(arg))" style="width: 100px">
        <option>Both</option>
        <option>False</option>
        <option>True</option>
    </select>
</p>
<!--- Whenever this page is requested, the code will be evealuated and
replaced with its result, thereby building the resulting html page,
which is shown in the browser. --->
@if (todos == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!todos.Any())
{
    <p>
        <em>Mo ToDo items exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>User ID</th>
            <th>Todo ID</th>
            <th>Title</th>
            <th>Completed?</th>
            <th>Remove</th>
            <th>Edit</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in todos)
        {
            <tr>
                <td>@item.UserId</td>
                <td>@item.TodoId</td>
                <td>@item.Title</td>
                <td>
                    <input type="checkbox" checked=@item.IsCompleted @onchange="@((arg) => CompletedChange(arg,item))"/>
                </td>
                <td>
                    <button @onclick="(() => RemoveTodo(item.TodoId))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>
                <td>
                    <button @onclick="@(() => Edit(item.TodoId))">
                        <i class="oi oi-pencil" style="color:#1b6ec2"/>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Todo> todos;
    private IList<Todo> allTodos;

    private int? filterById;
    private bool? filterByIsCompleted;

    protected override async Task OnInitializedAsync()
    {
        allTodos = await _todosService.GetTodosAsync();
        todos = allTodos;
    }

    private void RemoveTodo(int todoId)
    {
        Todo toDoToRemove = todos.First(t => t.TodoId == todoId);
        _todosService.RemoveTodoAsync(todoId);
        allTodos.Remove(toDoToRemove);
        todos.Remove(toDoToRemove);
    }

    private void CompletedChange(ChangeEventArgs evt, Todo todo)
    {
        todo.IsCompleted = (bool) evt.Value;
        _todosService.UpdateAsync(todo);
    }

    private void FilterByUserId(ChangeEventArgs changeEventArgs)
    {
        filterById = null;
        try
        {
            filterById = int.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e)
        {
        }
        if (filterById != null)
        {
            todos = allTodos.Where(t => t.UserId == filterById).ToList();
        }
        else
        {
            todos = allTodos;
        }
        ExecuteFilter();
    }

    private void FilterByCompletedStatus(ChangeEventArgs changeEventArgs)
    {
        filterByIsCompleted = null;
        try
        {
            filterByIsCompleted = bool.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e)
        {
            
        }
        ExecuteFilter();
    }

    private void Edit(int id)
    {
        try
        {
            NavigationManager.NavigateTo($"Edit/{id}");
        }
        catch (Exception e)
        {
            
        }
    }
    private void ExecuteFilter()
    {
        todos = allTodos.Where(t => (filterById != null && t.UserId == filterById
                                     || filterById == null) && (filterByIsCompleted != null && t.IsCompleted == filterByIsCompleted
                                                                || filterByIsCompleted == null)).ToList();
    }
}
